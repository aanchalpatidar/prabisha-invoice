// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User and Organization Models
model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  phone         String?
  isActive      Boolean  @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Role and permissions
  role     Role?   @relation(fields: [roleId], references: [id])
  roleId   String? @default("role_user") // Default to USER role

  // Auth relations
  accounts Account[]
  sessions Session[]

  // Organization relations
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  // User-specific company
  company Company?

  // Invoice system relations
  invoices   Invoice[]
  quotations Quotation[]

  @@index([email])
  @@index([organizationId])
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Users in this organization
  users User[]

  // Organization-specific data
  company Company?
  customers Customer[]
  services Service[]
  invoices Invoice[]
  quotations Quotation[]

  systemSettings SystemSettings?

  @@index([slug])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json     // Detailed permissions object
  isDefault   Boolean  @default(false)
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@index([name])
}

// Updated Company model (supports both user-specific and organization-shared)
model Company {
  id             String @id @default(cuid())
  userId         String? @unique // Optional - for user-specific companies
  organizationId String? @unique // Optional - for organization-shared companies
  name           String
  email          String
  phone          String
  address        String @db.Text
  logoUrl        String?
  bankName       String?
  bankAccount    String?
  bankIFSC       String?
  taxNumber      String?
  primaryColor   String? // HEX color for primary
  secondaryColor String? // HEX color for secondary
  isShared       Boolean @default(false) // Indicates if this is shared across organization
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices       Invoice[]
  quotations     Quotation[]

  @@map("companies")
}

// Updated Customer model (now organization-specific)
model Customer {
  id             String @id @default(cuid())
  organizationId String
  name           String
  email          String
  phone          String?
  billingAddress String @db.Text
  shippingAddress String? @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices     Invoice[]
  quotations   Quotation[]

  @@map("customers")
}

// Updated Service model (now organization-specific)
model Service {
  id             String @id @default(cuid())
  organizationId String
  name           String
  description    String? @db.Text
  price          Decimal @db.Decimal(10, 2)
  taxRate        Decimal @db.Decimal(5, 2) @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("services")
}

// Updated Invoice model (now user-specific company)
model Invoice {
  id            String @id @default(cuid())
  organizationId String
  invoiceNumber String
  companyId     String
  customerId    String
  createdById   String
  issueDate     DateTime
  dueDate       DateTime
  subtotal      Decimal @db.Decimal(10, 2)
  taxAmount     Decimal @db.Decimal(10, 2)
  total         Decimal @db.Decimal(10, 2)
  currency      String @default("USD")
  status        InvoiceStatus @default(DRAFT)
  notes         String? @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  company      Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdBy    User @relation(fields: [createdById], references: [id])
  lineItems    InvoiceLineItem[]

  @@unique([organizationId, invoiceNumber])
  @@map("invoices")
}

// Updated Quotation model (now user-specific company)
model Quotation {
  id              String @id @default(cuid())
  organizationId  String
  quotationNumber String
  companyId       String
  customerId      String
  createdById     String
  issueDate       DateTime
  validUntil      DateTime
  subtotal        Decimal @db.Decimal(10, 2)
  taxAmount       Decimal @db.Decimal(10, 2)
  total           Decimal @db.Decimal(10, 2)
  currency        String @default("USD")
  status          QuotationStatus @default(DRAFT)
  notes           String? @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  company      Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdBy    User @relation(fields: [createdById], references: [id])
  lineItems    QuotationLineItem[]

  @@unique([organizationId, quotationNumber])
  @@map("quotations")
}

model InvoiceLineItem {
  id          String @id @default(cuid())
  invoiceId   String
  name        String
  description String? @db.Text
  quantity    Decimal @db.Decimal(10, 2)
  price       Decimal @db.Decimal(10, 2)
  taxRate     Decimal @db.Decimal(5, 2) @default(0)
  total       Decimal @db.Decimal(10, 2)

  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_line_items")
}

model QuotationLineItem {
  id          String @id @default(cuid())
  quotationId String
  name        String
  description String? @db.Text
  quantity    Decimal @db.Decimal(10, 2)
  price       Decimal @db.Decimal(10, 2)
  taxRate     Decimal @db.Decimal(5, 2) @default(0)
  total       Decimal @db.Decimal(10, 2)

  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  @@map("quotation_line_items")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

model SystemSettings {
  id          String   @id @default(cuid())
  organizationId String @unique
  siteTitle   String   @default("Prabisha Invoice")
  siteDescription String @default("Professional invoice and quotation management system")
  faviconUrl  String?  @default("https://prabisha.com/wp-content/uploads/2023/10/Favicon-2.png")
  primaryColor String  @default("#2563eb")
  secondaryColor String @default("#10b981")
  logoUrl     String?
  contactEmail String?
  contactPhone String?
  address     String?  @db.Text
  footerText  String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("system_settings")
}
